plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

repositories {
    mavenCentral()
}
int javafxVersion=11
String javafxPlatform ="undefined"

if (javafxPlatform  == "undefined") {
    switch (org.gradle.internal.os.OperatingSystem.current()) {
        case org.gradle.internal.os.OperatingSystem.LINUX:
            javafxPlatform = "linux"
            break
        case org.gradle.internal.os.OperatingSystem.MAC_OS:
            javafxPlatform = "mac"
            break
        case org.gradle.internal.os.OperatingSystem.WINDOWS:
            javafxPlatform = "win"
            break
    }
}
println "Platform is: $javafxPlatform"

dependencies {

    compile("org.openjfx:javafx-base:${javafxVersion}:$javafxPlatform")
    compile("org.openjfx:javafx-controls:${javafxVersion}:$javafxPlatform")
    compile("org.openjfx:javafx-graphics:${javafxVersion}:${javafxPlatform }")
    compile("org.openjfx:javafx-fxml:${javafxVersion}:${javafxPlatform }")
}

javafx {
    version = "${javafxVersion}"
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
    /**
     * https://github.com/openjfx/javafx-gradle-plugin
     * JavaFX modules require native binaries for each platform. The plugin only includes binaries for the platform
     * running the build. By declaring the dependency configuration compileOnly, the native binaries will not be
     * included. You will need to provide those separately during deployment for each target platform.
     */
    configuration = 'compileOnly'
}

mainClassName = 'org.voc5.javafxclient.Main'

group = 'org.voc5'
description = 'javafx-client'
sourceCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.voc5.javafxclient.Main'
    }
}